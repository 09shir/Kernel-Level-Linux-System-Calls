diff -rupN /home/will/cmpt300/Backup/arch/x86/entry/syscalls/syscall_64.tbl /home/will/cmpt300/linux-5.4.109/arch/x86/entry/syscalls/syscall_64.tbl
--- /home/will/cmpt300/Backup/arch/x86/entry/syscalls/syscall_64.tbl	2021-03-30 05:35:30.000000000 -0700
+++ /home/will/cmpt300/linux-5.4.109/arch/x86/entry/syscalls/syscall_64.tbl	2024-07-04 10:29:18.831754220 -0700
@@ -357,6 +357,9 @@
 433	common	fspick			__x64_sys_fspick
 434	common	pidfd_open		__x64_sys_pidfd_open
 435	common	clone3			__x64_sys_clone3/ptregs
+436	common	cs300_test		__x64_sys_cs300_test
+437	common	array_stats		__x64_sys_array_stats
+438	common	process_ancestors	__x64_sys_process_ancestors
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
diff -rupN /home/will/cmpt300/Backup/cmpt300/array_stats.c /home/will/cmpt300/linux-5.4.109/cmpt300/array_stats.c
--- /home/will/cmpt300/Backup/cmpt300/array_stats.c	1969-12-31 16:00:00.000000000 -0800
+++ /home/will/cmpt300/linux-5.4.109/cmpt300/array_stats.c	2024-07-04 10:29:17.135695280 -0700
@@ -0,0 +1,38 @@
+#include <linux/kernel.h>
+#include <linux/syscalls.h>
+#include <linux/uaccess.h>
+#include "array_stats.h"
+
+SYSCALL_DEFINE3(array_stats, struct array_stats __user *, stats, long __user *, data, long, size) {
+    long min, max, sum, val;
+    int i;
+
+    if (size <= 0)
+        return -EINVAL;
+
+    if (!access_ok(stats, sizeof(struct array_stats)) || !access_ok(data, size * sizeof(long)))
+        return -EFAULT;
+
+    if (copy_from_user(&val, &data[0], sizeof(long)))
+        return -EFAULT;
+
+    min = max = sum = val;
+
+    for (i = 1; i < size; i++) {
+        if (copy_from_user(&val, &data[i], sizeof(long)))
+            return -EFAULT;
+
+        if (val < min)
+            min = val;
+        if (val > max)
+            max = val;
+        sum += val;
+    }
+
+    if (copy_to_user(&stats->min, &min, sizeof(long)) ||
+        copy_to_user(&stats->max, &max, sizeof(long)) ||
+        copy_to_user(&stats->sum, &sum, sizeof(long)))
+        return -EFAULT;
+
+    return 0;
+}
diff -rupN /home/will/cmpt300/Backup/cmpt300/array_stats.h /home/will/cmpt300/linux-5.4.109/cmpt300/array_stats.h
--- /home/will/cmpt300/Backup/cmpt300/array_stats.h	1969-12-31 16:00:00.000000000 -0800
+++ /home/will/cmpt300/linux-5.4.109/cmpt300/array_stats.h	2024-07-04 10:29:17.135695280 -0700
@@ -0,0 +1,13 @@
+// Define the array_stats struct for the array_stats syscall.
+#ifndef _ARRAY_STATS_H_
+#define _ARRAY_STATS_H_
+
+struct array_stats {
+	long min;
+	long max;
+	long sum;
+};
+
+asmlinkage long sys_array_stats(struct array_stats *stats, long *data, long size);
+
+#endif
diff -rupN /home/will/cmpt300/Backup/cmpt300/Makefile /home/will/cmpt300/linux-5.4.109/cmpt300/Makefile
--- /home/will/cmpt300/Backup/cmpt300/Makefile	1969-12-31 16:00:00.000000000 -0800
+++ /home/will/cmpt300/linux-5.4.109/cmpt300/Makefile	2024-07-04 10:29:17.139695420 -0700
@@ -0,0 +1 @@
+obj-y := array_stats.o process_ancestors.o
diff -rupN /home/will/cmpt300/Backup/cmpt300/process_ancestors.c /home/will/cmpt300/linux-5.4.109/cmpt300/process_ancestors.c
--- /home/will/cmpt300/Backup/cmpt300/process_ancestors.c	1969-12-31 16:00:00.000000000 -0800
+++ /home/will/cmpt300/linux-5.4.109/cmpt300/process_ancestors.c	2024-07-03 15:39:50.000000000 -0700
@@ -0,0 +1,61 @@
+#include <linux/kernel.h>
+#include <linux/syscalls.h>
+#include <linux/uaccess.h>
+#include <linux/sched.h>
+#include "process_ancestors.h"
+
+static int list_length(struct list_head *head) {
+	struct list_head *iter;
+	int count = 0;
+	list_for_each(iter, head) {
+		count++;
+	}
+
+	return count;
+}
+
+SYSCALL_DEFINE3(process_ancestors, struct process_info __user *, info_array, long, size, long __user *, num_filled)
+{
+	struct process_info kernel_info;	
+	struct task_struct *task;
+	long count = 0;
+
+	if (size <= 0) {
+		printk("\n --- 1 --- \n");
+		return -EINVAL;
+	}
+
+	if (!access_ok(info_array, size * sizeof(struct process_info)) || !access_ok(num_filled, sizeof(long))) {
+		printk("\n --- 2 --- \n");
+		return -EFAULT;
+	}
+
+	task = current;
+
+	while (task && task->pid != 0 && count < size) {
+		kernel_info.pid = task->pid;
+		strncpy(kernel_info.name, task->comm, ANCESTOR_NAME_LEN);
+		kernel_info.state = task->state;
+		kernel_info.uid = task->cred->uid.val;
+		kernel_info.nvcsw = task->nvcsw;
+		kernel_info.nivcsw = task->nivcsw;
+		kernel_info.num_children = list_length(&task->children);
+		kernel_info.num_siblings = list_length(&task->sibling) - 1;
+
+		if (copy_to_user(&info_array[count], &kernel_info, sizeof(struct process_info))) {
+			printk("\n --- 3 --- \n");
+			return -EFAULT;
+		}
+
+		task = task->parent;
+		count++;
+	}
+
+	if (copy_to_user(num_filled, &count, sizeof(long))) {
+		printk("\n --- 4 --- \n");
+		return -EFAULT;
+	}
+
+	printk("\n --- 5 --- \n");
+	return 0;
+}
diff -rupN /home/will/cmpt300/Backup/cmpt300/process_ancestors.h /home/will/cmpt300/linux-5.4.109/cmpt300/process_ancestors.h
--- /home/will/cmpt300/Backup/cmpt300/process_ancestors.h	1969-12-31 16:00:00.000000000 -0800
+++ /home/will/cmpt300/linux-5.4.109/cmpt300/process_ancestors.h	2024-07-04 10:29:17.139695420 -0700
@@ -0,0 +1,21 @@
+// Structure to hold values returned by process_ancestors sys-call
+#ifndef _PROCESS_ANCESTORS_H
+#define _PROCESS_ANCESTORS_H
+
+#define ANCESTOR_NAME_LEN 16
+struct process_info {
+	long pid;			/* Process ID */
+	char name[ANCESTOR_NAME_LEN];	/* Program name of process */
+	long state;			/* Current process state */
+	long uid;			/* User ID of process owner */
+	long nvcsw;			/* # of voluntary context switches */
+	long nivcsw;			/* # of involuntary context switches */
+	long num_children;		/* # of children processes */
+	long num_siblings;		/* # of sibling processes */
+};
+
+asmlinkage long sys_process_ancestors(struct process_info *info_array,
+                                      long size,
+                                      long *num_filled);
+
+#endif
diff -rupN /home/will/cmpt300/Backup/cs300/cs300_test.c /home/will/cmpt300/linux-5.4.109/cs300/cs300_test.c
--- /home/will/cmpt300/Backup/cs300/cs300_test.c	1969-12-31 16:00:00.000000000 -0800
+++ /home/will/cmpt300/linux-5.4.109/cs300/cs300_test.c	2024-07-04 10:43:41.870614282 -0700
@@ -0,0 +1,13 @@
+#include <linux/kernel.h>
+#include <linux/syscalls.h>
+// Implement a HelloWorld system call
+// Argument is passed from call in user space.
+SYSCALL_DEFINE1(cs300_test, int, argument)
+{
+long result = 0;
+printk("Hello World!\n");
+printk("--syscall argument %d\n", argument);
+result = argument + 1;
+printk("--returning %d + 1 = %ld\n", argument, result);
+return result;
+}
diff -rupN /home/will/cmpt300/Backup/cs300/Makefile /home/will/cmpt300/linux-5.4.109/cs300/Makefile
--- /home/will/cmpt300/Backup/cs300/Makefile	1969-12-31 16:00:00.000000000 -0800
+++ /home/will/cmpt300/linux-5.4.109/cs300/Makefile	2024-07-04 10:45:25.028828382 -0700
@@ -0,0 +1 @@
+obj-y := cs300_test.o
diff -rupN /home/will/cmpt300/Backup/Makefile /home/will/cmpt300/linux-5.4.109/Makefile
--- /home/will/cmpt300/Backup/Makefile	2021-03-30 05:35:30.000000000 -0700
+++ /home/will/cmpt300/linux-5.4.109/Makefile	2024-07-04 10:29:17.235698758 -0700
@@ -1036,7 +1036,7 @@ PHONY += prepare0
 export MODORDER := $(extmod-prefix)modules.order
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ cs300/ cmpt300/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
